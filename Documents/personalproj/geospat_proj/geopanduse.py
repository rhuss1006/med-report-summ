import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
from mpl_toolkits.basemap import Basemap

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix


FILENAME = 'meteorite_land.csv'

LAND_GREEN = '#228B22'
WATER_BLUE = '#00008B'
MIN_LAT = 24
MAX_LAT = 49
MIN_LON = -125
MAX_LON = -66

def normalize_mass(df, column_name):
    df['normalized mass'] = ((df[column_name] - df[column_name].min()) /
                              (df[column_name].max() - df[column_name].min()))
    return df

def run_prediction_model(X_train, X_test, y_train, y_test, k):
    """
    Does: runs a k nearest neighbors prediction model, returns the predictions
    generated by the model
    :param X_train: the training set data
    :param X_test: the testing set data
    :param y_train: the training set labels
    :param y_test: the testing set labels
    :param k: the number of nearest neighbors to use
    :return: the generated predictions
    """
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    return y_pred

def get_best_k(X_train, X_test, y_train, y_test, k_list):
    """
    Does: finds the most accurate value for k from a given list of k values to
    test.
    :param X_train: the training set data
    :param X_test: the testing set data
    :param y_train: the training set labels
    :param y_test: the testing set labels
    :param k_list: the list of k values
    :return: (best k, best accuracy) -> a tuple of the best k and the accuracy
    of that level k model
    """
    # adds a tuple of each k value and its accuracy to a list
    accuracies = []
    for i in range(len(k_list)):
        y_pred = run_prediction_model(X_train, X_test, y_train, y_test,
                                      k_list[i])
        report = classification_report(y_test, y_pred, output_dict=True,
                                       zero_division=0)
        accuracies.append(report['accuracy'])

    return accuracies

def separating_centuries(gdf, min_year, max_year):
    return gdf[gdf['year'].between(min_year, max_year)]

def main():

    # read in data, normalize mass
    df = pd.read_csv(FILENAME)
    df = normalize_mass(df, 'mass (g)')

    # get geospatial data using coordinates of landing site
    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df['reclong'], df['reclat'], crs='EPSG:4326'))
    gdf = gdf.dropna(subset=['mass (g)', 'reclong', 'reclat'])

    # plot map of globe with all meteor landings, size of dot = size of meteor
    map = Basemap(lat_0=0, lon_0=0)
    map.drawcoastlines()
    map.fillcontinents(color = LAND_GREEN, lake_color=WATER_BLUE)
    map.drawmapboundary(fill_color=WATER_BLUE)
    map.drawparallels([0, 23.5, -23.5, 45, -45, 90, -90], labels=[1, 0, 0, 0], linewidth=0.5, color='gray')
    map.drawmeridians([0, 90, 180, -90], labels=[0, 0, 0, 1], linewidth=0.5, color='gray')
    map.scatter(gdf.geometry.x, gdf.geometry.y, c='red', s=gdf['normalized mass'] * 20)

    plt.title('Map of All Recorded Meteorite Landings')
    plt.xlabel('Longitude', labelpad=20)
    plt.ylabel('Latitude', labelpad=45)
    plt.savefig('all_meteors.png')
    plt.show()

    # plot US map, filter data down to US meteor landings only

    us_meteors = gdf[gdf['reclat'].between(MIN_LAT, MAX_LAT)]
    us_meteors = us_meteors[us_meteors['reclong'].between(MIN_LON, MAX_LON)]
    us_meteors['lon'] = us_meteors.geometry.x
    us_meteors['lat'] = us_meteors.geometry.y

    us_map = Basemap(llcrnrlon=MIN_LON, llcrnrlat=MIN_LAT, urcrnrlon=MAX_LON, urcrnrlat=MAX_LAT,
                 lat_1=33, lat_2=45, lon_0=-95, resolution='i')

    x_data, y_data = us_map(us_meteors['lon'].values, us_meteors['lat'].values)

    us_map.drawcoastlines()
    us_map.drawcountries()
    us_map.drawstates()
    us_map.fillcontinents(color = LAND_GREEN, lake_color=WATER_BLUE)
    us_map.drawmapboundary(fill_color=WATER_BLUE)
    us_map.drawparallels([24, 36, 48], labels=[1, 0, 0, 0])
    us_map.drawmeridians([-120, -110, -100, -90, -80, -70], labels=[0, 0, 0, 1])
    us_map.scatter(x_data, y_data, c='red', s=us_meteors['normalized mass'] * 200)

    plt.title('Map of Recorded Meteorite Landings near the United States')
    plt.xlabel('Longitude', labelpad=20)
    plt.ylabel('Latitude', labelpad=35)
    plt.savefig('us_meteors.png')
    plt.show()

    # part 3: prediction model

    # looking to see how many classes of meteors are listed
    classes = []
    for index, row in us_meteors.iterrows():
        if row['recclass'] not in classes:
            classes.append(row['recclass'])

    X = us_meteors[['mass (g)', 'lon', 'lat']]
    y = us_meteors['recclass']

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    k_list = [i for i in range(1, 51)]
    best_k = get_best_k(X_train, X_test, y_train, y_test, k_list)

    plt.scatter(k_list, best_k, color='red', marker='x') # label??
    plt.xlim(0, 51)
    plt.ylim(0, 1)
    # plt.legend()
    plt.xlabel('Value of K used in KNN Model')
    plt.ylabel('Accuracy of Model')
    plt.title('Accuracy in Predicting Meteorite Class for Values of K')
    plt.savefig('knn_accuracy.png')
    plt.show()

    # part 4 - plotting diff colors based on time of landing

    year_range = (us_meteors['year'].min(), us_meteors['year'].max())

    us_meteors.dropna(subset=['year'], inplace=True)

    before_1800s = separating_centuries(us_meteors, min_year = 0, max_year = 1799)
    century_1800s = separating_centuries(us_meteors, min_year = 1800, max_year = 1899)
    century_1900s = separating_centuries(us_meteors, min_year=1900, max_year=1999)
    century_2000s = separating_centuries(us_meteors, min_year=2000, max_year=2012)

    us_map2 = Basemap(llcrnrlon=MIN_LON, llcrnrlat=MIN_LAT, urcrnrlon=MAX_LON, urcrnrlat=MAX_LAT,
                 lat_1=33, lat_2=45, lon_0=-95, resolution='i')
    us_map2.drawcoastlines()
    us_map2.drawcountries()
    us_map2.drawstates()
    us_map2.fillcontinents(color = LAND_GREEN, lake_color=WATER_BLUE)
    us_map2.drawmapboundary(fill_color=WATER_BLUE)
    us_map2.drawparallels([24, 36, 48], labels=[1, 0, 0, 0])
    us_map2.drawmeridians([-120, -110, -100, -90, -80, -70], labels=[0, 0, 0, 1])
    us_map2.scatter(before_1800s['lon'].values, before_1800s['lat'].values, c='purple', s=100, label='Pre-1800s')
    us_map2.scatter(century_1800s['lon'].values, century_1800s['lat'].values, c='red', s=25, label='1800s')
    us_map2.scatter(century_1900s['lon'].values, century_1900s['lat'].values, c = 'orange', s=5, label = '1900s')
    us_map2.scatter(century_2000s['lon'].values, century_2000s['lat'].values, c = 'yellow', s=25, label = '2000s')

    plt.title('Map of Recorded Meteorite Landings near US by Century')
    plt.xlabel('Longitude', labelpad=20)
    plt.ylabel('Latitude', labelpad=35)
    plt.legend(fontsize = 'small')
    plt.savefig('us_meteors_by_century.png')
    plt.show()




if __name__ == '__main__':
    main()
